{"Name":"DevExpress Grid","Id":3180,"Alias":"devexpress-grid","Description":"Your Next Great Mobile App Starts Here.  \r\n\r\nIntroduce high-impact, enterprise ready features to your next Android, iOS and Windows Phone app with the DevExpress Grid for Xamarin.Forms. Available free-of-charge, the DevExpress Grid ships with high-performance capabilities designed to fully address the data visualization and touch-first requirements of today’s BYOD world.  \r\n\r\nFeatures include the following:  \r\n\r\n* Flexible data binding options\r\n* Multiple column types (images, text, numbers, dates, etc.)\r\n* Grid cell templates\r\n* Auto generated columns for data source fields\r\n* Calculated (unbound) columns\r\n* Sorting against multiple columns\r\n* Outlook® inspired Data grouping\r\n* Excel® inspired Filtering (auto filter panel, multi-column filtering expressions)\r\n* Automatic data summary computation (total and group summaries)\r\n* Five predefined aggregate functions and ability to specify custom rules\r\n* Pull-to-refresh functionality\r\n* Load-more functionality\r\n* Custom cell appearances\r\n* Column resizing\r\n* New item row\r\n* In-place data editing\r\n* Built-in popup menus\r\n* Column chooser\r\n* Swipe buttons\r\n* Localization\n* Theming\n* Export to XLS, XLSX and CSV formats\n* Save and restore the Grid’s layout","Version":"16.2.1.0","Summary":"The FREE DevExpress Grid for Xamarin ships with dozens of high-impact Microsoft Outlook-inspired capabilities for your next iOS, Android \u0026 Windows Phone app.","QuickStart":"This tutorial provides an overview of the capabilities you’ll find in the DevExpress Grid Control – our feature-rich and FREE Grid Control for Xamarin.Forms. The step-by-step instructions that follow are designed to help you create a cross-platform application for Android, iOS and Windows Phone and to integrate our Outlook-inspired Grid Control within it.\r\n\r\nThe tutorial is divided into the following sections:  \r\n\r\n* Create a Solution\r\n* Add the DevExpress Grid Control\r\n* Generate the Data Source\r\n* Bind the Grid to Data and Create Columns\r\n* New Item Row\r\n* Data Sorting\r\n* Data Grouping\r\n* Data Summaries\r\n* Data Filtering \r\n\r\n*Note: Once you bind the grid to data, you can execute the app after each individual step to view intermediate results.  You can also skip tutorial steps if you’d like to explore a specific feature shipping inside the DevExpress Grid.*  \r\n\r\n#Create a Solution  \r\nCreate a new Xamarin.Forms Portable solution (*HelloGrid*) that includes Android, iOS, Windows Phone and PCL projects.    \r\n\r\nAdd the DevExpress Grid component to your Android and iOS projects using the Component Manager. References to the **DevExpress.Mobile.Grid.Android.v16.2.dll**, **DevExpress.Mobile.Core.Android.v16.2.dll**, **DevExpress.Mobile.Grid.iOS.v16.2.dll** and **DevExpress.Mobile.Core.iOS.v16.2.dll** libraries will be automatically added to your corresponding projects.  \r\n\r\nNext, manually add the **DevExpress.Mobile.Grid.WinPhone.v16.2.dll** and **DevExpress.Mobile.Core.WinPhone.v16.2.dll** assembly references to the Windows Phone project, and the **DevExpress.Mobile.Grid.v16.2.dll** and **DevExpress.Mobile.Core.v16.2.dll** assembly references to the PCL project. These libraries have been automatically copied to the following path within your solution folder.  \r\n\r\n*Components/devexpress—grid-16.2.1.0/lib/*  \r\n\r\nAdd the following initialization code to your Android (the *MainActivity.cs* file), iOS (the *AppDelegate.cs* file) and Windows Phone (the *MainPage.xaml.cs* file) projects.\r\n\r\nC#  \r\n```csharp  \r\nDevExpress.Mobile.Forms.Init ();  \r\n```\r\n#Add the DevExpress Grid Control  \r\nAdd a new content page (*MainPage*) to your PCL project. To set the start page for the application, modify the **App** class as follows:  \r\n\r\nC#  \r\n```csharp   \r\npublic class App : Application {\r\n    public App() {\r\n        this.MainPage = GetMainPage();\r\n    }\r\n    public static Page GetMainPage () {\r\n        return new MainPage ();\r\n    }\r\n}\r\n```\r\nAdd the DevExpress Grid Control to your page.  \r\n\r\nXAML (the *MainPage.xaml* file)  \r\n```xml\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \r\n             x:Class=\"HelloGrid.MainPage\" \r\n             xmlns:dxGrid=\"clr-namespace:DevExpress.Mobile.DataGrid;assembly=DevExpress.Mobile.Grid.v16.2\"\u003e \r\n    \u003cdxGrid:GridControl x:Name=\"grid\"\u003e \r\n    \u003c/dxGrid:GridControl\u003e \r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n#Generate the Data Source  \r\nIn this step, you will create an in-memory data source object and populate it with data.  \r\n\r\n*Note: Though the DevExpress Grid fully supports standard Xamarin data binding mechanisms, this tutorial uses an in-memory dataset to avoid dependence on external files or databases.*  \r\n\r\nDeclare the **Order** class encapsulating an individual data record. Its public properties (**Date**, **Shipped**, **Product** and **Quantity**) will serve as data source fields.  \r\n\r\nC#  \r\n```csharp \r\npublic class Order : ModelObject {\r\n\r\n    DateTime date;\r\n    bool shipped;\r\n    Product product;\r\n    int quantity;\r\n\r\n    public Order() {\r\n        this.date = DateTime.Today;\r\n        this.shipped = false;\r\n        this.product = new Product (\"\", 0);\r\n        this.quantity = 0;\r\n    }\r\n\r\n    public Order(DateTime date, bool shipped, Product product, int quantity) {\r\n        this.date = date;\r\n        this.shipped = shipped;\r\n        this.product = product;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public DateTime Date {\r\n        get { return date; }\r\n        set { if (date != value) {\r\n                date = value;\r\n                RaisePropertyChanged(\"Date\");}}\r\n    }\r\n\r\n    public bool Shipped {\r\n        get { return shipped; }\r\n        set { if(shipped != value) {\r\n                shipped = value;\r\n                RaisePropertyChanged(\"Shipped\");}}\r\n    }\r\n\r\n    public Product Product {\r\n        get { return product; }\r\n        set { if (product != value) {\r\n                product = value; \r\n                RaisePropertyChanged (\"Product\");}}\r\n    }\r\n\r\n    public int Quantity {\r\n        get { return quantity; }\r\n        set { if (quantity != value) {\r\n                quantity = value; \r\n                RaisePropertyChanged (\"Quantity\");}}\r\n    }\r\n}\r\n\r\npublic class Product : ModelObject {\r\n    string name;\r\n    int unitPrice;\r\n\r\n    public Product(string name, int unitPrice) {\r\n        this.name = name;\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public string Name {\r\n        get { return name; }\r\n        set { name = value; }\r\n    }\r\n\r\n    public int UnitPrice{\r\n        get { return unitPrice; }\r\n        set { unitPrice = value; }\r\n    }\r\n}\r\n\r\npublic class ModelObject : INotifyPropertyChanged {\r\n    public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n    protected void RaisePropertyChanged(string name) {\r\n        if (PropertyChanged != null)\r\n            PropertyChanged(this, new PropertyChangedEventArgs(name));\r\n    }\r\n}\r\n```\r\n\r\nA collection of **Order** objects will represent the Grid’s data source. This collection is returned by the **Orders** property of the **TestOrdersRepository** class.  \r\n\r\nC#  \r\n```csharp \r\npublic abstract class OrdersRepository {\r\n    readonly ObservableCollection\u003cOrder\u003e orders;\r\n\r\n    public OrdersRepository() {\r\n        this.orders = new ObservableCollection\u003cOrder\u003e();\r\n    }\r\n\r\n    public ObservableCollection\u003cOrder\u003e Orders {\r\n        get { return orders; }\r\n    }\r\n}\r\n\r\npublic class TestOrdersRepository : OrdersRepository {\r\n\r\n    const int orderCount = 100;\r\n    readonly List\u003cProduct\u003e products;\r\n    readonly Random random;\r\n\r\n    public TestOrdersRepository() : base() {\r\n        this.random = new Random((int)DateTime.Now.Ticks);\r\n        this.products = new List\u003cProduct\u003e();\r\n\r\n        GenerateProducts();\r\n\r\n        for (int i = 0; i \u003c orderCount; i++)\r\n            Orders.Add(GenerateOrder(i));\r\n    }\r\n\r\n    Order GenerateOrder(int number) {\r\n        Order order = new Order(new DateTime(2014, 1, 1).AddDays(random.Next(0, 60)), \r\n            number % 3 == 0, RandomItem\u003cProduct\u003e(products), random.Next(1, 100));\r\n        return order;\r\n    }\r\n\r\n    T RandomItem\u003cT\u003e(IList\u003cT\u003e list) {\r\n        int index = (int)(random.NextDouble() * 0.99 * (list.Count));\r\n        return list[index];\r\n    }\r\n\r\n    void GenerateProducts() {\r\n        products.Add(new Product(\"Tofu\", 50));\r\n        products.Add(new Product(\"Chocolade\", 34));\r\n        products.Add(new Product(\"Ikura\", 70));\r\n        products.Add(new Product(\"Chai\", 3));\r\n        products.Add(new Product(\"Boston Crab Meat\", 36));\r\n        products.Add(new Product(\"Ravioli Angelo\", 18));\r\n        products.Add(new Product(\"Ipon Coffee\", 10));\r\n        products.Add(new Product(\"Questo Cabrales\", 25));\r\n    }\r\n}\r\n```\r\n\r\n#Bind the DevExpress Grid to Data and Create Columns  \r\nSet **BindingContext** for the content page to an instance of the **TestOrdersRepository** class (in the *MainPage.xaml.cs* file) as demonstrated below.  \r\n\r\nC#  \r\n```csharp\r\nnamespace HelloGrid {    \r\n    public partial class MainPage : ContentPage {    \r\n        public MainPage () {\r\n            InitializeComponent ();\r\n\r\n            TestOrdersRepository model = new TestOrdersRepository ();\r\n            BindingContext = model;\r\n        }\r\n    }\r\n}\r\n```\r\nTo bind the Grid to a data source, assign the order collection object (**TestOrdersRepository.Orders**) to the **GridControl.ItemsSource** property.  \r\n\r\nOnce the grid is bound to the data source, create columns and bind them to data fields. The following column types (**GridColumn** descendant classes) are available for use in the Grid Control: **TextColumn**, **NumberColumn**, **DateColumn**, **SwitchColumn** or **ImageColumn**.  \r\n\r\nCreate appropriate column objects, bind each column to the corresponding data field using the **GridColumn.FieldName** property and add columns to the **GridControl.Columns** collection.  \r\n\r\nYou can create unbound columns and display calculated values based upon formulas applied against other columns. To start, add the appropriate column object to the **GridControl.Columns** collection and set the following column properties.  \r\n\r\n* **GridColumn.FieldName** - a unique string, one that does not match any field name in the Grid Control\u0027s underlying data source.  \r\n* **GridColumn.UnboundExpression** - a formula (string expression) to automatically evaluate values for the column.  \r\n* **GridColumn.UnboundType** - column data type (Boolean, DateTime, Decimal, Integer, String or Object).  \r\n\r\nIn the following example, the Total column is unbound and displays **Quantity** multiplied by **UnitPrice**.  \r\n\r\n\r\nXAML  \r\n```xml \r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\"\u003e \r\n    \u003cdxGrid:GridControl.Columns\u003e \r\n         \u003cdxGrid:TextColumn FieldName=\"Product.Name\" Caption = \"Product\" Width = \"170\" /\u003e \r\n         \u003cdxGrid:NumberColumn FieldName=\"Product.UnitPrice\" Caption = \"Price\" DisplayFormat=\"C0\"/\u003e \r\n         \u003cdxGrid:NumberColumn FieldName=\"Quantity\"/\u003e \r\n         \u003cdxGrid:NumberColumn FieldName=\"Total\" \r\n                              UnboundType=\"Integer\" UnboundExpression=\"[Quantity] * [Product.UnitPrice]\" \r\n                              IsReadOnly=\"True\" DisplayFormat=\"C0\"/\u003e \r\n         \u003cdxGrid:DateColumn FieldName=\"Date\" DisplayFormat=\"d\"/\u003e \r\n         \u003cdxGrid:SwitchColumn FieldName=\"Shipped\" /\u003e \r\n    \u003c/dxGrid:GridControl.Columns\u003e \r\n\u003c/dxGrid:GridControl\u003e \r\n```\r\n\r\n#New Item Row  \r\nTo help simplify data entry by your end-users, the DevExpress Grid includes a Microsoft Outlook-inspired New Item Row option. To activate it, set the **GridControl.NewItemRowVisibility** property to **true** as illustrated below.\r\n\r\nXAML  \r\n```xml\r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\" NewItemRowVisibility = \"true\"\u003e \r\n    \u003c!-- ... --\u003e \r\n\u003c/dxGrid:GridControl\u003e\r\n```\r\n\r\n#Data Sorting  \r\n*By default*, the DevExpress Grid will sort data against a single column. To initiate sorting, set the desired column’s **GridColumn.SortOrder** property to **Ascending** or **Descending**. Once sort order is selected, the Grid will first clear all previously applied sort operations and then re-sort data as specified.  \r\n\r\n*To sort data against multiple columns*, set the **GridControl.SortMode** property to **GridSortMode.Multiple**, and specify **GridColumn.SortOrder** for the desired columns. To specify sort order priority, use the **GridColumn.SortIndex** property for your sorted columns.  \r\n\r\nTo disable end-user sorting, use the **GridColumn.AllowSort** property.  \r\n\r\nThe following example sorts orders by **Product.Name** and **Quantity** and disables end-user sorting for the **Shipped** column.  \r\n\r\nXAML    \r\n```xml\r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\" \r\n\t \t\t\t\tNewItemRowVisibility = \"true\" \r\n\t\t\t\t\tCalculateCustomSummary=\"grid_CustomSummary\" \r\n\t\t\t\t\tSortMode = \"Multiple\"\u003e\r\n\t\u003cdxGrid:GridControl.Columns\u003e\r\n\t \t\u003cdxGrid:TextColumn FieldName=\"Product.Name\" Caption = \"Product\" Width = \"170\" \r\n\t\t\t\t\t\t\tSortOrder = \"Descending\" SortIndex = \"0\"/\u003e\r\n\t \t\u003c!-- ... --\u003e\r\n\t \t\u003cdxGrid:NumberColumn FieldName=\"Quantity\" \r\n\t \t\t\t\t\t\t SortOrder = \"Ascending\" SortIndex = \"1\"/\u003e\r\n\t \t\u003c!-- ... --\u003e\r\n\t \t\u003cdxGrid:SwitchColumn FieldName=\"Shipped\" AllowSort = \"False\"/\u003e\r\n\t\u003c/dxGrid:GridControl.Columns\u003e\r\n\u003c/dxGrid:GridControl\u003e\r\n```\r\n\r\n#Data Grouping  \r\nThe DevExpress Grid Control allows you to group data against the values displayed in its columns. Use the following code to group orders by date using the **GridColumn.IsGrouped** and **GridColumn.GroupInterval** properties.  \r\n\r\nXAML  \r\n```xml\r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\" NewItemRowVisibility = \"true\"\u003e \r\n    \u003cdxGrid:GridControl.Columns\u003e \r\n         \u003c!-- ... --\u003e \r\n         \u003cdxGrid:DateColumn FieldName=\"Date\" DisplayFormat=\"d\" \r\n                            IsGrouped = \"true\" GroupInterval = \"Date\"/\u003e \r\n         \u003c!-- ... --\u003e \r\n    \u003c/dxGrid:GridControl.Columns\u003e \r\n\u003c/dxGrid:GridControl\u003e\r\n```\r\n\r\n#Data Summaries  \r\nThe DevExpress Grid allows you to display total or group summaries – aggregate function values calculated against the entire dataset or record groups respectively - when data grouping is enabled.  \r\n\r\nTotal summaries are stored in the **GridControl.TotalSummaries** collection. Group summaries are stored in the **GridControl.GroupSummaries** collection. In both instances, individual summaries are specified by **GridColumnSummary** objects. To activate summary computations, you will need to specify the data field (**GridColumnSummary.FieldName**), aggregate function type (**GridColumnSummary.Type**) and summary value format (**GridColumnSummary.DisplayFormat**).  \r\n\r\nPredefined aggregate function types are Count, Max, Min, Sum and Average.  \r\n\r\nIn this example, a group summary is used to display the maximum **Total** value for each record group, and a total summary to display the sum of all values in the **Total** column.  \r\n\r\nThe sample code below also illustrates the use of a custom defined aggregate function to count the number of \"un-shipped\" orders. Aggregate functions can be implemented by setting the **GridColumnSummary.Type** property to **Custom** and handling the **GridControl.CalculateCustomSummary** event.  \r\n\r\nXAML  \r\n```xml\r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\" \r\n                    NewItemRowVisibility = \"true\" \r\n                    CalculateCustomSummary=\"OnCalculateCustomSummary\"\u003e \r\n    \u003c!-- ... --\u003e \r\n    \u003cdxGrid:GridControl.GroupSummaries\u003e \r\n        \u003cdxGrid:GridColumnSummary FieldName=\"Total\" Type=\"Max\" \r\n                                  DisplayFormat=\"Max Total: {0:C0}\"/\u003e \r\n    \u003c/dxGrid:GridControl.GroupSummaries\u003e \r\n\r\n      \u003cdxGrid:GridControl.TotalSummaries\u003e \r\n          \u003cdxGrid:GridColumnSummary FieldName=\"Total\" Type=\"Sum\" \r\n                                    DisplayFormat= \"Total: {0:C0}\"/\u003e \r\n          \u003cdxGrid:GridColumnSummary FieldName=\"Shipped\" Type=\"Custom\" \r\n                                    DisplayFormat= \"Not Shipped: {0}\"/\u003e \r\n      \u003c/dxGrid:GridControl.TotalSummaries\u003e \r\n\u003c/dxGrid:GridControl\u003e\r\n```\r\n\r\nC#  \r\n```csharp\r\nint count;\r\n// ... \r\n\r\nvoid OnCalculateCustomSummary(object sender, CustomSummaryEventArgs e) {\r\n    if (e.FieldName.ToString () == \"Shipped\")\r\n        if (e.IsTotalSummary){\r\n            if (e.SummaryProcess == CustomSummaryProcess.Start) {\r\n                count = 0;\r\n            }\r\n            if (e.SummaryProcess == CustomSummaryProcess.Calculate) {\r\n                if (!(bool)e.FieldValue)\r\n                    count++;\r\n                e.TotalValue = count;\r\n            }\r\n        }\r\n}\r\n```  \r\n\r\n#Data Filtering  \r\nThe DevExpress Grid supports data filtering against multiple columns.  \r\n\r\nTo apply a filter against a specific column, use the **GridColumn.AutoFilterValue** property. To specify a comparison operator, use the **GridColumn.AutoFilterCondition** property.  \r\n\r\nTo activate filtering for end-users, enable the Grid’s built-in auto-filter panel using the **GridControl.AutoFilterPanelVisibility** property. Auto-filter functionality can be disabled for any column via the **GridColumn.AllowAutoFilter** property.  \r\n\r\nXAML  \r\n```xml\r\n\u003cdxGrid:GridControl x:Name=\"grid\" ItemsSource=\"{Binding Orders}\" \r\n                    NewItemRowVisibility = \"true\" \r\n                    CalculateCustomSummary=\"grid_CustomSummary\" \r\n                    SortMode = \"Multiple\" AutoFilterPanelVisibility=\"true\"\u003e \r\n    \u003cdxGrid:GridControl.Columns\u003e \r\n         \u003c!-- ... --\u003e \r\n         \u003cdxGrid:SwitchColumn FieldName=\"Shipped\" AllowSort = \"False\" AllowAutoFilter=\"false\"/\u003e \r\n    \u003c/dxGrid:GridControl.Columns\u003e \r\n\u003c/dxGrid:GridControl\u003e\r\n```\r\n\r\nTo create filter expressions that consists of multiple conditions applied to multiple columns, use the **GridControl.FilterExpression** and **GridControl.FilterString** properties as necessary.  \r\n\r\nOnce a filter has been applied, the DevExpress Grid automatically displays a filter panel at the bottom of its container. The panel provides feedback on the currently applied filter criteria and buttons designed to temporarily disable or to clear the filter. To control panel visibility, use the **GridControl.FilterPanelVisibility** property.  \r\n\r\n#Result  \r\nIf you’ve followed this step-by-step tutorial, your resulting application should look like the following.  \r\n ","Hash":"d0de11904a21ae52de18280dac821aaa","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}